//==========================================
//          Partners
//==========================================
Yixin Nie

//==========================================
//          Write up
//==========================================
- Describe any design decisions you made, including your deadlock detection policy, locking granularity, etc.
We used timeout policy to detect deadlock and the locking granularity is page level.

- In part 2.3, we ask you to implement NO STEAL/FORCE buffer management policy and assume that the system won't crash while running transactionComplete. Why does NO STEAL/FORCE and no crashes while processing transactionComplete makes your job easier. In other words, what, what's complicated about implementing STEAL/NO FORCE buffer management policy and what measures do we need to take if our system could crash while running transactionComplete

STEAL means we can flush some dirty page to disk even if the current transaction is not complete. If at this time, another transaction needs to access the same data on disk, then this transaction reads the dirty data, which has not been committed by the previous transaction.

NO FORCE means after a transaction commits, we do not flush all dirty page to disk right away. In the case of system crash, those dirty page are lost and the data are not updated on disk for the committed transaction.

Both STEAL and NO FORCE complicate the implementation. We need to take extra care in managing those pages in the buffer pool. However, with undo and redo logging, we can achieve the effect of STEAL and NO FORCE.

If system crashes in the phase of flushing dirty data onto disk, then it's possible that some data on disk are updated, and some are not, thus creating database state inconsistency. To avoid this kind of inconsistency, we need to use logging to recover database to its consistent state.

- What ACID properties do these simplifications above aim to guarantee?
consistency

- Discuss and justify any changes you made to the API.
No API changes are made in this project.
